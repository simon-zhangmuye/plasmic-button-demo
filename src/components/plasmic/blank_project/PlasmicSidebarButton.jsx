// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wG323JFbw5EGa1mJ84z4iW
// Component: 3p4GgDKXnm
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SidebarStateContext } from "./PlasmicGlobalVariant__SidebarState"; // plasmic-import: yexwK6-nIu/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: wG323JFbw5EGa1mJ84z4iW/projectcss
import * as sty from "./PlasmicSidebarButton.module.css"; // plasmic-import: 3p4GgDKXnm/css
import AntDesignmenuFoldOutlinedIcon from "./icons/PlasmicIcon__AntDesignmenuFoldOutlined"; // plasmic-import: 9ChvWW7Aqa/icon
import AntDesignmenuUnfoldOutlinedIcon from "./icons/PlasmicIcon__AntDesignmenuUnfoldOutlined"; // plasmic-import: sLFpFPhj2s/icon

export const PlasmicSidebarButton__VariantProps = new Array();

export const PlasmicSidebarButton__ArgProps = new Array();

function PlasmicSidebarButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    sidebarState: React.useContext(SidebarStateContext)
  });

  return (
    <p.PlasmicIcon
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      PlasmicIconType={
        hasVariant(globalVariants, "sidebarState", "close")
          ? AntDesignmenuUnfoldOutlinedIcon
          : AntDesignmenuFoldOutlinedIcon
      }
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_sidebarState_close]: hasVariant(
          globalVariants,
          "sidebarState",
          "close"
        )
      })}
      role={"img"}
    />
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebarButton__ArgProps,
      internalVariantPropNames: PlasmicSidebarButton__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSidebarButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebarButton";
  } else {
    func.displayName = `PlasmicSidebarButton.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarButton = Object.assign(
  // Top-level PlasmicSidebarButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSidebarButton
    internalVariantProps: PlasmicSidebarButton__VariantProps,
    internalArgProps: PlasmicSidebarButton__ArgProps
  }
);

export default PlasmicSidebarButton;
/* prettier-ignore-end */
