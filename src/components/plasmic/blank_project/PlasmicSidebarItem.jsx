// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wG323JFbw5EGa1mJ84z4iW
// Component: f2YaxDbA1j
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SidebarStateContext } from "./PlasmicGlobalVariant__SidebarState"; // plasmic-import: yexwK6-nIu/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: wG323JFbw5EGa1mJ84z4iW/projectcss
import * as sty from "./PlasmicSidebarItem.module.css"; // plasmic-import: f2YaxDbA1j/css
import GgmenuGridRIcon from "./icons/PlasmicIcon__GgmenuGridR"; // plasmic-import: _2IQcD74H4/icon

export const PlasmicSidebarItem__VariantProps = new Array();

export const PlasmicSidebarItem__ArgProps = new Array("children", "slot");

function PlasmicSidebarItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    sidebarState: React.useContext(SidebarStateContext)
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_sidebarState_close]: hasVariant(
          globalVariants,
          "sidebarState",
          "close"
        )
      })}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, sty.box)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <GgmenuGridRIcon
              className={classNames(defaultcss.all, sty.svg__murVs)}
              role={"img"}
            />
          ),

          value: args.children
        })}
      </div>

      {p.renderPlasmicSlot({
        defaultContents: "Sidebar Item1",
        value: args.slot,
        className: classNames(sty.slotSlot)
      })}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "box"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebarItem__ArgProps,
      internalVariantPropNames: PlasmicSidebarItem__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSidebarItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebarItem";
  } else {
    func.displayName = `PlasmicSidebarItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarItem = Object.assign(
  // Top-level PlasmicSidebarItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicSidebarItem
    internalVariantProps: PlasmicSidebarItem__VariantProps,
    internalArgProps: PlasmicSidebarItem__ArgProps
  }
);

export default PlasmicSidebarItem;
/* prettier-ignore-end */
