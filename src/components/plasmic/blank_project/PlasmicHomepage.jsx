// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wG323JFbw5EGa1mJ84z4iW
// Component: fiUsFCPUPvg_
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SidebarButton from "../../SidebarButton"; // plasmic-import: 3p4GgDKXnm/component
import SidebarItem from "../../SidebarItem"; // plasmic-import: f2YaxDbA1j/component
import { SidebarStateContext } from "./PlasmicGlobalVariant__SidebarState"; // plasmic-import: yexwK6-nIu/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: wG323JFbw5EGa1mJ84z4iW/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: fiUsFCPUPvg_/css
import BxbxFoodMenuIcon from "./icons/PlasmicIcon__BxbxFoodMenu"; // plasmic-import: RHoIVl6U1y/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    sidebarState: React.useContext(SidebarStateContext)
  });

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__global_sidebarState_close]: hasVariant(
                globalVariants,
                "sidebarState",
                "close"
              ),

              [sty.root__global_sidebarState_open]: hasVariant(
                globalVariants,
                "sidebarState",
                "open"
              )
            }
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(defaultcss.all, sty.header)}
          >
            <SidebarButton
              data-plasmic-name={"sidebarButton"}
              data-plasmic-override={overrides.sidebarButton}
              className={classNames("__wab_instance", sty.sidebarButton)}
            />
          </div>

          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(defaultcss.all, sty.body)}
          >
            <div
              data-plasmic-name={"sidebar"}
              data-plasmic-override={overrides.sidebar}
              className={classNames(defaultcss.all, sty.sidebar, {
                [sty.sidebar__global_sidebarState_close]: hasVariant(
                  globalVariants,
                  "sidebarState",
                  "close"
                )
              })}
            >
              <SidebarItem
                className={classNames("__wab_instance", sty.sidebarItem__ji20L)}
              />

              <SidebarItem
                className={classNames(
                  "__wab_instance",
                  sty.sidebarItem__n34Gr,
                  {
                    [sty.sidebarItem__global_sidebarState_close__n34GRn6N9]:
                      hasVariant(globalVariants, "sidebarState", "close")
                  }
                )}
                slot={"Sidebar Item2"}
              >
                <BxbxFoodMenuIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg)}
                  role={"img"}
                />
              </SidebarItem>
            </div>

            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(defaultcss.all, sty.main, {
                [sty.main__global_sidebarState_close]: hasVariant(
                  globalVariants,
                  "sidebarState",
                  "close"
                ),

                [sty.main__global_sidebarState_open]: hasVariant(
                  globalVariants,
                  "sidebarState",
                  "open"
                )
              })}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "header", "sidebarButton", "body", "sidebar", "svg", "main"],
  header: ["header", "sidebarButton"],
  sidebarButton: ["sidebarButton"],
  body: ["body", "sidebar", "svg", "main"],
  sidebar: ["sidebar", "svg"],
  svg: ["svg"],
  main: ["main"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sidebarButton: makeNodeComponent("sidebarButton"),
    body: makeNodeComponent("body"),
    sidebar: makeNodeComponent("sidebar"),
    svg: makeNodeComponent("svg"),
    main: makeNodeComponent("main"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
